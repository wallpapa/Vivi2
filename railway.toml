import path from 'path';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = supabaseUrl && supabaseKey ? createClient(supabaseUrl, supabaseKey) : null;

app.get('/dashboard', async (req, res) => {
  if (!supabase) {
    return res.status(403).send('<h2>Dashboard is disabled - Supabase not configured</h2>');
  }

  const { branch, doctor } = req.query;

  let query = supabase.from('payments').select('amount, created_at, branch, doctor');
  if (branch) query = query.eq('branch', branch);
  if (doctor) query = query.eq('doctor', doctor);
  const { data, error } = await query;

  if (error || !data) {
    return res.status(500).send('<h2>Error fetching data from Supabase</h2>');
  }

  const monthlyTotals: Record<string, number> = {};
  for (const entry of data) {
    const month = new Date(entry.created_at).toLocaleString('default', { month: 'short' });
    monthlyTotals[month] = (monthlyTotals[month] || 0) + entry.amount;
  }

  const chartLabels = Object.keys(monthlyTotals);
  const chartValues = Object.values(monthlyTotals);

  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Dashboard</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <style>
        body {
          font-family: sans-serif;
          margin: 2rem;
          background: #f4f4f4;
        }
        h1 { color: #0070f3; }
        canvas { max-width: 600px; margin-top: 2rem; }
      </style>
    </head>
    <body>
      <h1>üìä Dashboard - Monthly Revenue</h1>
      <form id="filterForm" style="margin-bottom: 2rem;">
        <label>
          Branch:
          <select name="branch" id="branchSelect">
            <option value="">All</option>
            <option value="Ekkamai">Ekkamai</option>
            <option value="Siam">Siam</option>
          </select>
        </label>
        <label style="margin-left: 1rem;">
          Doctor:
          <select name="doctor" id="doctorSelect">
            <option value="">All</option>
            <option value="Dr.Kwankao">Dr.Kwankao</option>
            <option value="Dr.Nat">Dr.Nat</option>
          </select>
        </label>
        <button type="submit" style="margin-left: 1rem;">Filter</button>
      </form>
      <p style="color: #555;">Filtered by: Branch = ${branch || 'All'}, Doctor = ${doctor || 'All'}</p>
      <canvas id="myChart"></canvas>
      <script>
        const urlParams = new URLSearchParams(window.location.search);
        document.getElementById('branchSelect').value = urlParams.get('branch') || '';
        document.getElementById('doctorSelect').value = urlParams.get('doctor') || '';
        document.getElementById('filterForm').addEventListener('submit', function(event) {
          event.preventDefault();
          const branch = document.getElementById('branchSelect').value;
          const doctor = document.getElementById('doctorSelect').value;
          const query = new URLSearchParams({ branch, doctor }).toString();
          window.location.search = query;
        });

        const ctx = document.getElementById('myChart').getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: ${JSON.stringify(chartLabels)},
            datasets: [{
              label: 'Revenue (THB)',
              data: ${JSON.stringify(chartValues)},
              backgroundColor: '#0070f3'
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'top' },
              title: { display: true, text: 'Monthly Revenue' }
            }
          }
        });
      </script>
    </body>
    </html>
  `);
});

app.get('/admin/report', async (req, res) => {
  if (!supabase) {
    return res.status(403).send('<h2>Report is disabled - Supabase not configured</h2>');
  }

  const { data, error } = await supabase
    .from('payments')
    .select('id, created_at, amount, patient_name, doctor, branch')
    .order('created_at', { ascending: false })
    .limit(50);

  if (error || !data) {
    return res.status(500).send('<h2>Error loading report</h2>');
  }

  const rows = data.map((r) => `
    <tr>
      <td>${r.created_at}</td>
      <td>${r.patient_name || '-'}</td>
      <td>${r.doctor || '-'}</td>
      <td>${r.branch || '-'}</td>
      <td style="text-align:right;">${r.amount.toLocaleString()}</td>
    </tr>
  `).join('');

  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Transaction Report</title>
      <style>
        body {
          font-family: sans-serif;
          margin: 2rem;
          background: #fff;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 2rem;
        }
        th, td {
          padding: 8px 12px;
          border-bottom: 1px solid #ccc;
        }
        th {
          background: #0070f3;
          color: white;
          text-align: left;
        }
      </style>
    </head>
    <body>
      <h1>üìÅ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h1>
      <table>
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</th>
            <th>‡πÅ‡∏û‡∏ó‡∏¢‡πå</th>
            <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
            <th style="text-align:right;">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</th>
          </tr>
        </thead>
        <tbody>${rows}</tbody>
      </table>
    </body>
    </html>
  `);
});

app.get('/admin/commission', async (req, res) => {
  if (!supabase) {
    return res.status(403).send('<h2>Commission page is disabled - Supabase not configured</h2>');
  }

  const { data, error } = await supabase
    .from('commissions')
    .select('staff_name, staff_type, total_earnings, month')
    .order('month', { ascending: false })
    .limit(50);

  if (error || !data) {
    return res.status(500).send('<h2>Error loading commission data</h2>');
  }

  const rows = data.map((r) => `
    <tr>
      <td>${r.month}</td>
      <td>${r.staff_name}</td>
      <td>${r.staff_type}</td>
      <td style="text-align:right;">${r.total_earnings?.toLocaleString() || 0}</td>
    </tr>
  `).join('');

  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Commission Summary</title>
      <style>
        body {
          font-family: sans-serif;
          margin: 2rem;
          background: #fafafa;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 2rem;
        }
        th, td {
          padding: 8px 12px;
          border-bottom: 1px solid #ddd;
        }
        th {
          background: #28a745;
          color: white;
          text-align: left;
        }
      </style>
    </head>
    <body>
      <h1>üí∞ Commission Overview</h1>
      <table>
        <thead>
          <tr>
            <th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£</th>
            <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
            <th style="text-align:right;">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)</th>
          </tr>
        </thead>
        <tbody>${rows}</tbody>
      </table>
    </body>
    </html>
  `);
});